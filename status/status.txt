* WCF/WCS tasks and status

** Summary

	Most of the classes are updated to RC1 version.

	System.Runtime.Serialization.dll is roughtly implemented. For
	practical use it needs much more love.

	System.IdentityModel.dll is not implemented. We will need some
	basis in that assembly for Infocard identity token support.

	System.ServiceModel.dll is the core of Indigo. Most of the
	following lines of this document are about this dll.

	System.IdentityModel.Selectors.dll is not implemented. This library
	itself does not reference System.ServiceModel.dll, but it instead
	invokes infocard.exe which is totally dependent on
	System.ServiceModel.dll.


** Per-concept status


*** Bindings

	Binding is actually just a set of BindingElements and predefined
	properties. So they will work when all of dependent binding
	elements are implemented.

*** Transport

	(Here "transport" means TransportBindingElement and all of
	its dependent IChannelFactory and IChannelListener implementations.)

	For TransportBindingElements, channel implementations are also
	significant. For now, only HttpTransportBindingElement is touched.
	HTTP connection now works. See samples/http-low-level-binding.

	TcpTransportBindingElement can be implemented. We don't have to
	touch ComIntegration, MsmqIntegration and dependent things.


*** Message Encoders

	For MessageEncodingBindingElements and MessageEncoders, text is 
	implemented. Mtom and binary are practically not done. They depend
	on S.R.Serialization.dll which is not finished yet.


*** Message and MessageBuffer

	They are implemented. If part of these classes does not work it is
	a bug.


*** ServiceContract support

	Instantiation of ContractDescriptions, OperationDescriptions and
	MessageDescriptions are roughly implemented. However, the details
	might be ignored at later stage (e.g. channels).

	We have pretty simple support for "typed message" conversion.


*** DataContract support

	We have basic DataContract support.

	(I'm not spending a lot of time on it since data contract is not for
	serious use. .NET uses Message for every serious service contract
	such as ws-mex and wst:RequestSecurityToken.)


*** ChannelFactory and ClientBase at client side

	They are used to create client proxies for certain ServiceEndpoint.

	Simple HTTP channel factory and client are working. since svcutil
	is implemented, simple service proxies work.


*** ServiceHostBase

	It is to dispatch requests to a proper channel based on filters.

	It basically works.

	We also have basic ASP.NET hosting support (SvcHttpHandlerFactory)
	which supports .svc files and creates ServiceHost instance.


*** Dispatcher support

	Some basic dispatcher things are working.

	Filters and FilterTables are somewhat implemented.

	Dispatcher things are currently not mandatory in current primitive
	ServiceHost implementation, but will be strongly tied at some stage.


*** Wsdl/Policy importer/exporter

	Ankit has done some basic work on both WSDL export and import.
	WSDL import is used in svcutil (to consume WSDLs).
	WSDL export is used in ServiceMetadataExtension (*.svc?wsdl support).

*** WS-Addressing support

	Although EndpointAddress and AddressHeaders already exist, addressing
	practically not implemented.


*** WS-AtomicTransaction

	I somewhat tried to show the proof of concept implementation of
	how TransactionFlowBindingElement works. Nothing is verified.


*** Configuration support

	We mostly use autogenerated classes from masterinfos. From
	sys.configuration hacking experience, the actual implementation are
	also semi-automatically generated and kinda works.


*** Security support

	It is explained later (as this chunk of specs is too massive).


*** Infocard protocol implementation

	It could be implemented as a practical example of security tokens.
	We will also need infocard protocol handler (ASP.NET land) possibly
	formed as firefox extension, and Gtk# identity selector client
	as well.


*** Anything else

	... are unlikely been done, especially because I'm unaware about
	them now ;-)


** Per assembly/namespace status

*** System.Runtime.Serialization.dll

**** System.Xml namespace

	XmlDictionaryReader should work as basic XmlReader 
	implementation. For XmlDictionary and XmlDictionaryString, things are
	left untested. Dictionary part is only for optimizations, so it is
	not in priority.

	Binary reader/writer are left as old implementation of former
	Indigo stuff. Mtom reader/writer are not implemented. Both of them
	are not in priority.

**** System.Runtime.Serialization namespace

	[major]
	DataContractSerializer and related classes will be heavily used
	to serialize and deserialize messages to and from service/client
	implementations. There are many related classes such as
	KnownTypeCollection.

	There is an issue: we don't know about the exact implementation
	logic of those serializer/deserializer. For example, we need to
	find out how we can instantiate objects without constructor.
	My guess is transparent proxy related things (as sometimes clients
	show Remoting related types in the stack trace in MS.NET), but
	not sure.

	NetDataContractSerializer is not in high priority but we need to
	find out how it is different from DataContractSerializer (only
	at supplying runtime type information?).

**** System.Runtime.Serialization.Configuration namespace

	Not in priority.


*** System.IdentityModel.dll

*** System.IdentityModel.Claims namespaces

	Mostly implemented except for windows-only things.


*** System.IdentityModel.Policy namespace

	The implementation is almost done, but in fact far from tested well.


*** System.IdentityModel.Selectors namespace

	Those base classes for are largely implemented. Some concrete derived
	classes (especially Windows dependent stuff) are left unimplemented.


*** System.IdentityModel.Tokens namespace

	Some basic classes have unimplemented parts.

	X509 support classes as well.

	SAML classes are largely unimplemented.


*** System.IdentityModel.Selectors.dll

	It is not implemented, since it is almost dependent on infocard.exe.


*** System.ServiceModel.dll

	We need to solve many pieces of pazzle here, across the namespaces.


** Tasks

** Milestone

	1. Basic connection establishment
	  - Basic ServiceHost side logic : hacked
	  - Connect via HTTP and process messages : hacked
	  - Support message from/to service method invocation : hacked
	  - Support client native method invocation proxy : hacked
	  - Optionally configuration support : hacked

	From here, 2, 3 and 4 are not necessary to be sequential

	2. Web Service support
	  - System.Runtime.Serialization xsd support : kinda works
	  - WSDL support : WsdlImporter and WsdlExporter kinda works
	  - svcutil.exe : partly hacked
	  - .svc IHttpHandler : it partly works but some fixes are needed.

	3. WS-Security and all relevant stuff
	    - MessageProperty support (HttpRequest-, Security- etc): partly
	    - MessageBuffer implementation for its internal use: done
	    - xmlenc/xmldsig support for WSS: done, based on Sys.Security.dll
	    - simplest connection :
	      - basic X509SecurityToken based communication: done, with bugs
	        - retrieve correct tokens and use correct parameters
	        - support both symmetric and asymmetric binding elements
	      - basic WSSecurityTokenSerializer support: done
	    - Timestamp/DetectReplays support: done
	    - key derivation support
	    - token authentication
	  - SecurityTokenManager for several token parameters: it includes
	    - SecurityTokenProvider for several token parameters
	    - SecurityTokenAuthenticator for several token parameters
	    - SAML implementation
	  - SslSecurityTokenParameters: it includes
	    - connection-based token retrieval
	    - SSL token processing
	  - WS-SecureConversation support: it includes
	    - SecureConversationSecurityTokenParameters
	    - SecurityContextSecurityToken
	  - IssuedSecurityTokenProvider : it includes
	    - analysis on its behavior: largely done
	    - WS-Trust request processing (especially at service side)
	  - ServiceAuthorizationManager implementation

	3. Infocard implementation
	  - infocard selector/manager GUI
	  - System.IdentityModel.Selectors.dll to invoke infocard.exe.
	  - sts.exe

	4. everything else
	  - some of Filter and FilterTables
	  - NetTcpBinding
	  - NetPeerTcpBinding
	  - NetNamedPipeBinding
	  - P2P
	  - Transactions
	  - SAML support
	  - XmlSerializer in Messages
	  - InstanceContext
	  - Duplex channels and client base.
	  - Sessions
	  - Behaviors : some are done
	  - Extensions
	  - MetadataResolver
	  - Policy[Import|Export]Extension implementation

	5. Not on the list
	  - Msmq support
	  - ComContract support


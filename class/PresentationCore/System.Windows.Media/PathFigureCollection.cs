
/* this file is generated by gen-collection-types.cs.  do not modify */

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Windows.Media.Animation;

namespace System.Windows.Media {


	public class PathFigureCollection : Animatable, ICollection<PathFigure>, IList<PathFigure>, ICollection, IList, IFormattable
	{
		List<PathFigure> list;

		public struct Enumerator : IEnumerator<PathFigure>, IEnumerator
		{
			public void Reset()
			{
				throw new NotImplementedException (); 
			}

			public bool MoveNext()
			{
				throw new NotImplementedException (); 
			}

			public PathFigure Current {
				get { throw new NotImplementedException (); }
			}

			object IEnumerator.Current {
				get { return Current; }
			}

			void IDisposable.Dispose()
			{
			}
		}

		public PathFigureCollection ()
		{
			list = new List<PathFigure>();
		}

		public PathFigureCollection (IEnumerable<PathFigure> values)
		{
			list = new List<PathFigure> (values);
		}

		public PathFigureCollection (int length)
		{
			list = new List<PathFigure> (length);
		}

		public new PathFigureCollection Clone ()
		{
			throw new NotImplementedException ();
		}

		public new PathFigureCollection CloneCurrentValue ()
		{
			throw new NotImplementedException ();
		}

		public bool Contains (PathFigure value)
		{
			return list.Contains (value);
		}

		public bool Remove (PathFigure value)
		{
			return list.Remove (value);
		}

		public int IndexOf (PathFigure value)
		{
			return list.IndexOf (value);
		}

		public void Add (PathFigure value)
		{
			list.Add (value);
		}

		public void Clear ()
		{
			list.Clear ();
		}

		public void CopyTo (PathFigure[] array, int arrayIndex)
		{
			list.CopyTo (array, arrayIndex);
		}

		public void Insert (int index, PathFigure value)
		{
			list.Insert (index, value);
		}

		public void RemoveAt (int index)
		{
			list.RemoveAt (index);
		}

		public int Count {
			get { return list.Count; }
		}

		public PathFigure this[int index] {
			get { return list[index]; }
			set { list[index] = value; }
		}

		public static PathFigureCollection Parse (string str)
		{
			throw new NotImplementedException ();
		}

		bool ICollection<PathFigure>.IsReadOnly {
			get { return false; }
		}

		public Enumerator GetEnumerator()
		{
			return new Enumerator();
		}

		IEnumerator<PathFigure> IEnumerable<PathFigure>.GetEnumerator()
		{
			return GetEnumerator ();
		}

		IEnumerator IEnumerable.GetEnumerator ()
		{
			return GetEnumerator();
		}

		bool ICollection.IsSynchronized {
			get { return false; }
		}

		object ICollection.SyncRoot {
			get { return this; }
		}

		void ICollection.CopyTo(Array array, int offset)
		{
			CopyTo ((PathFigure[]) array, offset);
		}

		bool IList.IsFixedSize {
			get { return false; }
		}

		bool IList.IsReadOnly {
			get { return false; }
		}

		object IList.this[int index] {
			get { return this[index]; }
			set { this[index] = (PathFigure)value; }
		}

		int IList.Add (object value)
		{
			Add ((PathFigure)value);
			return Count;
		}

		bool IList.Contains (object value)
		{
			return Contains ((PathFigure)value);
		}

		int IList.IndexOf (object value)
		{
			return IndexOf ((PathFigure)value);
		}

		void IList.Insert (int index, object value)
		{
			Insert (index, (PathFigure)value);
		}

		void IList.Remove (object value)
		{
			Remove ((PathFigure)value);
		}

		public override string ToString ()
		{
			throw new NotImplementedException ();
		}

		public string ToString (IFormatProvider provider)
		{
			throw new NotImplementedException ();
		}

		string IFormattable.ToString (string format, IFormatProvider provider)
		{
			throw new NotImplementedException ();
		}


		protected override bool FreezeCore (bool isChecking)
		{{
			if (isChecking) {{
				return base.FreezeCore (isChecking);
			}}
			else {{
				return true;
			}}
		}}



		protected override Freezable CreateInstanceCore ()
		{
			return new PathFigureCollection();
		}

		protected override void GetAsFrozenCore (Freezable sourceFreezable)
		{
			throw new NotImplementedException ();
		}

		protected override void GetCurrentValueAsFrozenCore (Freezable sourceFreezable)
		{
			throw new NotImplementedException ();
		}

		protected override void CloneCurrentValueCore (Freezable sourceFreezable)
		{
			throw new NotImplementedException ();
		}

		protected override void CloneCore (Freezable sourceFreezable)
		{
			throw new NotImplementedException ();
		}
	}
}


/* this file is generated by gen-collection-types.cs.  do not modify */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Windows.Media.Animation;

namespace System.Windows.Media {


	public class DoubleCollection : Freezable, ICollection<Double>, IList<Double>, ICollection, IList
	{
		public struct Enumerator : IEnumerator<Double>, IEnumerator
		{
			public void Reset()
			{
				throw new NotImplementedException (); 
			}

			public bool MoveNext()
			{
				throw new NotImplementedException (); 
			}

			public Double Current {
				get { throw new NotImplementedException (); }
			}

			object IEnumerator.Current {
				get { return Current; }
			}

			void IDisposable.Dispose()
			{
			}
		}

		public DoubleCollection ()
		{
		}

		public DoubleCollection (IEnumerable<Double> values)
		{
		}

		public DoubleCollection (int length)
		{
		}

		public DoubleCollection Clone ()
		{
			throw new NotImplementedException ();
		}

		public DoubleCollection CloneCurrentValue ()
		{
			throw new NotImplementedException ();
		}

		protected override Freezable CreateInstanceCore ()
		{
			throw new NotImplementedException ();
		}

		protected override void GetCurrentValueAsFrozenCore (Freezable sourceFreezable)
		{
			throw new NotImplementedException ();
		}

		protected override void CloneCurrentValueCore (Freezable sourceFreezable)
		{
			throw new NotImplementedException ();
		}

		protected override void CloneCore (Freezable sourceFreezable)
		{
			throw new NotImplementedException ();
		}

		public bool Contains (double value)
		{
			throw new NotImplementedException ();
		}

		public bool Remove (double value)
		{
			throw new NotImplementedException ();
		}

		public int IndexOf (double value)
		{
			throw new NotImplementedException ();
		}

		public void Add (double value)
		{
			throw new NotImplementedException ();
		}

		public void Clear ()
		{
			throw new NotImplementedException ();
		}

		public void CopyTo (double[] array, int offset)
		{
			throw new NotImplementedException ();
		}

		public void Insert (int index, double value)
		{
			throw new NotImplementedException ();
		}

		public void RemoveAt (int index)
		{
			throw new NotImplementedException ();
		}

		public int Count {
			get { throw new NotImplementedException (); }
		}

		public double this[int index] {
			get { throw new NotImplementedException (); }
			set { throw new NotImplementedException (); }
		}

		public static DoubleCollection Parse (string str)
		{
			throw new NotImplementedException ();
		}

		bool ICollection<Double>.IsReadOnly {
			get { return false; }
		}

		IEnumerator<Double> IEnumerable<Double>.GetEnumerator()
		{
			throw new NotImplementedException ();
		}

		IEnumerator IEnumerable.GetEnumerator ()
		{
			throw new NotImplementedException ();
		}

		bool ICollection.IsSynchronized {
			get { return false; }
		}

		object ICollection.SyncRoot {
			get { return this; }
		}

		void ICollection.CopyTo(Array array, int offset)
		{
			CopyTo ((double[]) array, offset);
		}

		bool IList.IsFixedSize {
			get { return false; }
		}

		bool IList.IsReadOnly {
			get { return false; }
		}

		object IList.this[int index] {
			get { return this[index]; }
			set { this[index] = (double)value; }
		}

		int IList.Add (object value)
		{
			Add ((double)value);
			return Count;
		}

		bool IList.Contains (object value)
		{
			return Contains ((double)value);
		}

		int IList.IndexOf (object value)
		{
			return IndexOf ((double)value);
		}

		void IList.Insert (int index, object value)
		{
			Insert (index, (double)value);
		}

		void IList.Remove (object value)
		{
			Remove ((double)value);
		}

	}
}

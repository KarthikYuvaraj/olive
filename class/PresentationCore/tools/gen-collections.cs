using System;
using System.IO;

public class GenCollectionType {

	const int VALUE_TYPE = 0x10000;
	const int REFERENCE_TYPE = 0x10000;

	enum CollectionType {
		Int32,
		Double,
		Point,
		Geometry,
		Drawing,
		PathFigure,
		PathSegment,
		GradientStop,
		GeneralTransform
	};

	static bool IsFreezable (CollectionType t)
	{
		switch (t) {
		case CollectionType.Int32:
		case CollectionType.Double:
		case CollectionType.Point:
			return true;
		default:
			return false;
		}
	}

	static string GetParameterType (CollectionType t)
	{
		switch (t) {
		case CollectionType.Int32: return "int";
		case CollectionType.Double: return "double";
		default:
			return t.ToString();
		}
	}

	CollectionType type;

	GenCollectionType (CollectionType type)
	{
		this.type = type;
	}

	void OutputHeader (TextWriter tw)
	{
		tw.WriteLine (@"
/* this file is generated by gen-collection-types.cs.  do not modify */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Windows.Media.Animation;

namespace System.Windows.Media {
");
	}

	void OutputFooter (TextWriter tw)
	{
		tw.WriteLine ("	}\n}"); /* close the namespace */
	}

	void OutputCollection (TextWriter tw)
	{
		tw.WriteLine (@"
	public class {0}Collection : {2}, ICollection<{0}>, IList<{0}>, ICollection, IList
	{{
		public struct Enumerator : IEnumerator<{0}>, IEnumerator
		{{
			public void Reset()
			{{
				throw new NotImplementedException (); 
			}}

			public bool MoveNext()
			{{
				throw new NotImplementedException (); 
			}}

			public {0} Current {{
				get {{ throw new NotImplementedException (); }}
			}}

			object IEnumerator.Current {{
				get {{ return Current; }}
			}}

			void IDisposable.Dispose()
			{{
			}}
		}}

		public {0}Collection ()
		{{
		}}

		public {0}Collection (IEnumerable<{0}> values)
		{{
		}}

		public {0}Collection (int length)
		{{
		}}

		public {0}Collection Clone ()
		{{
			throw new NotImplementedException ();
		}}

		public {0}Collection CloneCurrentValue ()
		{{
			throw new NotImplementedException ();
		}}

		protected override Freezable CreateInstanceCore ()
		{{
			throw new NotImplementedException ();
		}}

		protected override void GetCurrentValueAsFrozenCore (Freezable sourceFreezable)
		{{
			throw new NotImplementedException ();
		}}

		protected override void CloneCurrentValueCore (Freezable sourceFreezable)
		{{
			throw new NotImplementedException ();
		}}

		protected override void CloneCore (Freezable sourceFreezable)
		{{
			throw new NotImplementedException ();
		}}

		public bool Contains ({1} value)
		{{
			throw new NotImplementedException ();
		}}

		public bool Remove ({1} value)
		{{
			throw new NotImplementedException ();
		}}

		public int IndexOf ({1} value)
		{{
			throw new NotImplementedException ();
		}}

		public void Add ({1} value)
		{{
			throw new NotImplementedException ();
		}}

		public void Clear ()
		{{
			throw new NotImplementedException ();
		}}

		public void CopyTo ({1}[] array, int offset)
		{{
			throw new NotImplementedException ();
		}}

		public void Insert (int index, {1} value)
		{{
			throw new NotImplementedException ();
		}}

		public void RemoveAt (int index)
		{{
			throw new NotImplementedException ();
		}}

		public int Count {{
			get {{ throw new NotImplementedException (); }}
		}}

		public {1} this[int index] {{
			get {{ throw new NotImplementedException (); }}
			set {{ throw new NotImplementedException (); }}
		}}

		public static {0}Collection Parse (string str)
		{{
			throw new NotImplementedException ();
		}}

		bool ICollection<{0}>.IsReadOnly {{
			get {{ return false; }}
		}}

		IEnumerator<{0}> IEnumerable<{0}>.GetEnumerator()
		{{
			throw new NotImplementedException ();
		}}

		IEnumerator IEnumerable.GetEnumerator ()
		{{
			throw new NotImplementedException ();
		}}

		bool ICollection.IsSynchronized {{
			get {{ return false; }}
		}}

		object ICollection.SyncRoot {{
			get {{ return this; }}
		}}

		void ICollection.CopyTo(Array array, int offset)
		{{
			CopyTo (({1}[]) array, offset);
		}}

		bool IList.IsFixedSize {{
			get {{ return false; }}
		}}

		bool IList.IsReadOnly {{
			get {{ return false; }}
		}}

		object IList.this[int index] {{
			get {{ return this[index]; }}
			set {{ this[index] = ({1})value; }}
		}}

		int IList.Add (object value)
		{{
			Add (({1})value);
			return Count;
		}}

		bool IList.Contains (object value)
		{{
			return Contains (({1})value);
		}}

		int IList.IndexOf (object value)
		{{
			return IndexOf (({1})value);
		}}

		void IList.Insert (int index, object value)
		{{
			Insert (index, ({1})value);
		}}

		void IList.Remove (object value)
		{{
			Remove (({1})value);
		}}
", type, GetParameterType(type), IsFreezable(type) ? "Freezable" : "Animatable");
		
	}

	void OutputFreezeCore (TextWriter tw)
	{
		tw.WriteLine (@"
		protected override bool FreezeCore (bool isChecking)
		{{
			throw new NotImplementedException ();
		}}");
	}

	void OutputCollectionFile ()
	{
		string filename = String.Format ("System.Windows.Media/{0}Collection.cs", type);

		Console.WriteLine ("outputting file {0}", filename);

		TextWriter tw = File.CreateText (filename);

		OutputHeader(tw);
		OutputCollection (tw);
		if (!IsFreezable(type))
			OutputFreezeCore (tw);
		OutputFooter(tw);

		tw.Close ();
	}

	public static void Main (string[] args)
	{
		foreach (CollectionType ct in Enum.GetValues(typeof (CollectionType))) {
			GenCollectionType gc = new GenCollectionType(ct);

			gc.OutputCollectionFile ();
		}
	}
}